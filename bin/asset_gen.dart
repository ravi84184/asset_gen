import 'dart:io';

/// --------------------------------------------------------------------------
///  ASSET GEN - A Dart script to auto-generate constants for asset paths
/// --------------------------------------------------------------------------
///  Author: Ravi
///  GitHub: https://github.com/ravi84184/asset_gen
///  License: MIT
///  Last Updated: July 2025
///
///  üìÅ Scans the given assets/ directory (default: 'assets/')
///  üìÑ Generates: lib/generated/assets.dart
///
///  ‚úÖ Supports:
///     - Automatic camelCase constant generation
///     - Reserved word protection
///     - Unique name resolution
///     - Clean and valid Dart identifiers
///
///  Usage:
///     dart run asset_gen [optional-assets-folder]
///
/// --------------------------------------------------------------------------
void main(List<String> arguments) async {
  final assetsDir = arguments.isNotEmpty ? arguments.first : 'assets';
  final outputPath = 'lib/generated/assets.dart';

  if (!Directory(assetsDir).existsSync()) {
    print('Directory "$assetsDir" does not exist.');
    exit(1);
  }

  final reservedWords = {
    'class',
    'return',
    'static',
    'void',
    'if',
    'else',
    'true',
    'false',
    'final',
    'var',
    'int',
    'double',
    'bool',
    'null',
  };

  final usedNames = <String, int>{};
  String toCamelCase(String input) {
    final parts = input.split('_');
    if (parts.isEmpty) return input;

    final first = parts.first.toLowerCase();
    final rest = parts.skip(1).map((word) {
      if (word.isEmpty) return '';
      return word[0].toUpperCase() + word.substring(1).toLowerCase();
    });

    return first + rest.join();
  }

  String sanitizeName(String path, String base) {
    final relative = path.replaceFirst('$base/', '');
    var name = relative
        .replaceAll(RegExp(r'[^\w]+'), '_')
        .replaceAll(RegExp(r'_+'), '_')
        .replaceFirst(RegExp(r'^_+'), '');

    if (RegExp(r'^\d').hasMatch(name)) name = 'a$name';
    if (reservedWords.contains(name)) name = '${name}_asset';

    return toCamelCase(name); // ‚Üê camel case it
  }

  String uniqueName(String base) {
    if (!usedNames.containsKey(base)) {
      usedNames[base] = 1;
      return base;
    } else {
      final count = usedNames[base]!;
      usedNames[base] = count + 1;
      return '${base}_$count';
    }
  }

  String assetsDartContent = '''// GENERATED CODE - DO NOT MODIFY BY HAND
// -----------------------------------------------------------------------------
//  This file is auto-generated by asset_gen
//  Do not make manual changes. Regenerate by running the generator script.
//  Last Created: %date%
// -----------------------------------------------------------------------------
''';
  final buffer = StringBuffer();
  buffer.writeln(
    assetsDartContent.replaceAll("%date%", DateTime.now().toString()),
  );
  buffer.writeln('class AppAssets {');
  final dir = Directory(assetsDir);
  await for (var entity in dir.list(recursive: true)) {
    if (entity is File) {
      final path = entity.path.replaceAll('\\', '/');
      final baseName = sanitizeName(path, assetsDir);
      final name = uniqueName(baseName);
      buffer.writeln("  static const String $name = '$path';");
    }
  }
  buffer.writeln('}');
  final outFile = File(outputPath);
  await outFile.create(recursive: true);
  await outFile.writeAsString(buffer.toString());
  print('‚úÖ assets.dart file generated at: $outputPath');
}
